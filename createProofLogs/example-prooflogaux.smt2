(declare-fun x () Bool)
(declare-fun y () Bool)
(define-const $7 Bool (=> x y))
(declare-fun tseitin (Bool Bool Bool) Proof)
(define-const $16 Bool (not x))
(define-const $15 Bool (not $7))
(define-const $17 Proof (tseitin $15 $16 y))
(infer (not x) y (not $7) $17)
(declare-fun tseitin (Bool Bool) Proof)
(define-const $18 Proof (tseitin x $7))
(infer x $7 $18)
(define-const $9 Bool (not y))
(define-const $19 Proof (tseitin $9 $7))
(infer (not y) $7 $19)
(define-const $8 Bool (=> y x))
(define-const $20 Bool (not $8))
(define-const $21 Proof (tseitin $20 $9 x))
(infer x (not y) (not $8) $21)
(define-const $22 Proof (tseitin y $8))
(infer y $8 $22)
(define-const $23 Proof (tseitin $16 $8))
(infer (not x) $8 $23)
(define-const $10 Bool (and $7 $8 x $9))
(define-const $24 Bool (not $10))
(define-const $25 Proof (tseitin $24 $7))
(infer $7 (not $10) $25)
(define-const $26 Proof (tseitin $24 $8))
(infer $8 (not $10) $26)
(define-const $27 Proof (tseitin $24 x))
(infer x (not $10) $27)
(define-const $28 Proof (tseitin $24 $9))
(infer (not y) (not $10) $28)
(declare-fun tseitin (Bool Bool Bool Bool Bool) Proof)
(define-const $29 Proof (tseitin $15 $20 $16 y $10))
(infer (not x) y (not $7) (not $8) $10 $29)
(declare-fun z () Bool)
(assume $10 z)
(assume (not z))
(declare-fun rup () Proof)
(infer $10 rup)
(infer $7 rup)
(infer $8 rup)
(infer x rup)
(infer (not y) rup)
(infer rup)
