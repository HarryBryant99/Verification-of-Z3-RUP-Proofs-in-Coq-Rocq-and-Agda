(declare-fun s1 () Bool)
(declare-fun p0 () Bool)
(define-const $7 Bool (not s1))
(define-const $9 Bool (and $7 p0))
(declare-fun tseitin (Bool Bool) Proof)
(define-const $28 Bool (not $9))
(define-const $29 Proof (tseitin $28 $7))
(infer (not s1) (not $9) $29)
(define-const $30 Proof (tseitin $28 p0))
(infer p0 (not $9) $30)
(declare-fun tseitin (Bool Bool Bool) Proof)
(define-const $12 Bool (not p0))
(define-const $31 Proof (tseitin s1 $12 $9))
(infer s1 (not p0) $9 $31)
(declare-fun s0 () Bool)
(assume (not s0) $9)
(assume s0 (not $9))
(define-const $11 Bool (not s0))
(define-const $13 Bool (and $11 $12))
(define-const $32 Bool (not $13))
(define-const $33 Proof (tseitin $32 $11))
(infer (not s0) (not $13) $33)
(define-const $34 Proof (tseitin $32 $12))
(infer (not p0) (not $13) $34)
(define-const $35 Proof (tseitin s0 p0 $13))
(infer s0 p0 $13 $35)
(assume (not s1) $13)
(assume s1 (not $13))
(declare-fun s3 () Bool)
(declare-fun p1 () Bool)
(define-const $17 Bool (not s3))
(define-const $19 Bool (and $17 p1))
(define-const $36 Bool (not $19))
(define-const $37 Proof (tseitin $36 $17))
(infer (not s3) (not $19) $37)
(define-const $38 Proof (tseitin $36 p1))
(infer p1 (not $19) $38)
(define-const $22 Bool (not p1))
(define-const $39 Proof (tseitin s3 $22 $19))
(infer s3 (not p1) $19 $39)
(declare-fun s2 () Bool)
(assume (not s2) $19)
(assume s2 (not $19))
(define-const $21 Bool (not s2))
(define-const $23 Bool (and $21 $22))
(define-const $40 Bool (not $23))
(define-const $41 Proof (tseitin $40 $21))
(infer (not s2) (not $23) $41)
(define-const $42 Proof (tseitin $40 $22))
(infer (not p1) (not $23) $42)
(define-const $43 Proof (tseitin s2 p1 $23))
(infer s2 p1 $23 $43)
(assume (not s3) $23)
(assume s3 (not $23))
(define-const $25 Bool (and s0 s1))
(define-const $44 Bool (not $25))
(define-const $45 Proof (tseitin $44 s0))
(infer s0 (not $25) $45)
(define-const $46 Proof (tseitin $44 s1))
(infer s1 (not $25) $46)
(define-const $47 Proof (tseitin $11 $7 $25))
(infer (not s0) (not s1) $25 $47)
(define-const $26 Bool (and s2 s3))
(define-const $48 Bool (not $26))
(define-const $49 Proof (tseitin $48 s2))
(infer s2 (not $26) $49)
(define-const $50 Proof (tseitin $48 s3))
(infer s3 (not $26) $50)
(define-const $51 Proof (tseitin $21 $17 $26))
(infer (not s2) (not s3) $26 $51)
(assume $25 $26)
(declare-fun rup () Proof)
(infer (not $25) rup)
(infer $26 rup)
(infer s2 rup)
(infer s3 rup)
(infer $19 rup)
(infer (not $23) rup)
(infer rup)
