(declare-fun a () Bool)
(declare-fun d () Bool)
(declare-fun c () Bool)
(declare-fun b () Bool)
(define-const $9 Bool (and a b c d))
(declare-fun tseitin (Bool Bool) Proof)
(define-const $15 Bool (not $9))
(define-const $16 Proof (tseitin $15 a))
(infer a (not $9) $16)
(define-const $17 Proof (tseitin $15 b))
(infer b (not $9) $17)
(define-const $18 Proof (tseitin $15 c))
(infer c (not $9) $18)
(define-const $19 Proof (tseitin $15 d))
(infer d (not $9) $19)
(declare-fun tseitin (Bool Bool Bool Bool Bool) Proof)
(define-const $10 Bool (not d))
(define-const $21 Bool (not c))
(define-const $20 Bool (not b))
(define-const $13 Bool (not a))
(define-const $22 Proof (tseitin $13 $20 $21 $10 $9))
(infer (not a) (not b) (not c) (not d) $9 $22)
(define-const $11 Bool (and a b c $10))
(define-const $23 Bool (not $11))
(define-const $24 Proof (tseitin $23 a))
(infer a (not $11) $24)
(define-const $25 Proof (tseitin $23 b))
(infer b (not $11) $25)
(define-const $26 Proof (tseitin $23 c))
(infer c (not $11) $26)
(define-const $27 Proof (tseitin $23 $10))
(infer (not d) (not $11) $27)
(define-const $28 Proof (tseitin $13 $20 $21 d $11))
(infer (not a) (not b) (not c) d $11 $28)
(assume $9 $11)
(assume (not a))
(declare-fun rup () Proof)
(infer (not $9) rup)
(infer (not $11) rup)
(infer rup)
